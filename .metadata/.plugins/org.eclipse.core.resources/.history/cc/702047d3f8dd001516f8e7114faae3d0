package com.yuan.com;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class MyProxyUtils {
	//获得代理类对象
	public static Object getProxyObject(final Object object,final Advice advice) throws InstantiationException, IllegalAccessException{
		//InvocationHandler对象
		InvocationHandler  handler  = new InvocationHandler() {
			public Object invoke(Object proxy, Method method, Object[] args)
					throws Throwable {
				advice.doBefore(); //目标方法执行前
				Object obj = method.invoke(object, args);   //调用目标对象的对应方法
				advice.doAfter();//目标方法执行后
				return obj;
			}
		};
		//创建动态类对象
		Object  proxy = Proxy.newProxyInstance(object.getClass().getClassLoader(),
				object.getClass().getInterfaces(), 
				handler);
		return proxy;
	}
}
